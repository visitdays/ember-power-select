{{#basic-dropdown
  classNames=(readonly classNames)
  horizontalPosition=(readonly horizontalPosition)
  calculatePosition=calculatePosition
  destination=(readonly destination)
  initiallyOpened=(readonly initiallyOpened)
  matchTriggerWidth=(readonly matchTriggerWidth)
  preventScroll=(readonly preventScroll)
  aria-describedby=(readonly ariaDescribedBy)
  aria-label=(readonly ariaLabel)
  aria-labelledby=(readonly ariaLabelledBy)
  onClose=(action "onClose")
  onOpen=(action "onOpen")
  registerAPI=(action "registerAPI")
  renderInPlace=(readonly renderInPlace)
  verticalPosition=(readonly verticalPosition)
  disabled=(readonly disabled)
  tabindex="0"
  as |dropdown|}}

  {{#dropdown.trigger
    role=(readonly triggerRole)
    tagName=(readonly _triggerTagName)
    aria-describedby=(readonly ariaDescribedBy)
    ariaInvalid=(readonly ariaInvalid)
    ariaRequired=(readonly required)
    aria-label=(readonly ariaLabel)
    aria-labelledby=(readonly ariaLabelledBy)
    class=(readonly concatenatedTriggerClasses)
    id=(readonly triggerId)
    eventType="mousedown"
    onKeyDown=(action "onTriggerKeydown")
    onFocus=(action "onTriggerFocus")
    onBlur=(action "onTriggerBlur")
    tabindex=(and (not disabled) (or tabindex "0"))
  }}
    {{#component triggerComponent
      allowClear=(readonly allowClear)
      buildSelection=(readonly buildSelection)
      extra=(readonly extra)
      listboxId=(readonly optionsId)
      loadingMessage=(readonly loadingMessage)
      tabindex="0"
      onFocus=(action "onFocus")
      onBlur=(action "onBlur")
      onInput=(action "onInput")
      placeholder=(readonly placeholder)
      placeholderComponent=(readonly placeholderComponent)
      aria-describedby=(readonly ariaDescribedBy)
      aria-label=(readonly ariaLabel)
      aria-labelledby=(readonly ariaLabelledBy)
      onKeydown=(action "onKeydown")
      searchEnabled=(readonly searchEnabled)
      searchField=(readonly searchField)
      select=(readonly publicAPI)
      selectedItemComponent=(readonly selectedItemComponent)
      as |opt term|}}
      {{yield opt term}}
    {{/component}}
  {{/dropdown.trigger}}

  {{#dropdown.content _contentTagName=_contentTagName class=(readonly concatenatedDropdownClasses)}}
    {{component beforeOptionsComponent
      extra=(readonly extra)
      listboxId=(readonly optionsId)
      aria-describedby=(readonly ariaDescribedBy)
      ariaInvalid=(readonly ariaInvalid)
      aria-label=(readonly ariaLabel)
      aria-labelledby=(readonly ariaLabelledBy)
      onInput=(action "onInput")
      onKeydown=(action "onKeydown")
      searchEnabled=(readonly searchEnabled)
      onFocus=(action "onFocus")
      onBlur=(action "onBlur")
      placeholder=(readonly placeholder)
      placeholderComponent=(readonly placeholderComponent)
      searchPlaceholder=(readonly searchPlaceholder)
      select=(readonly publicAPI)}}
    {{#if mustShowSearchMessage}}
      {{component searchMessageComponent
        searchMessage=(readonly searchMessage)
        select=(readonly publicAPI)
        aria-describedby=(readonly ariaDescribedBy)
        ariaLabel=(readonly ariaLabel)
        aria-labelledby=(readonly ariaLabelledBy)
      }}
    {{else if mustShowNoMessages}}
      {{#if (hasBlock "inverse")}}
        {{yield to="inverse"}}
      {{else if noMatchesMessage}}
           <ul
             class="ember-power-select-options"
             role="listbox"
             tabindex="0"
             aria-activedescendant={{listboxId}}
             id={{listboxId}}
             aria-describedby={{readonly ariaDescribedBy}}
             aria-label={{readonly ariaLabel}}
             aria-labelledby={{readonly ariaLabelledBy}}
           >
          <li class="ember-power-select-option ember-power-select-option--no-matches-message" role="option">
            {{noMatchesMessage}}
          </li>
        </ul>
      {{/if}}
    {{else}}
      {{#component optionsComponent
        class="ember-power-select-options"
        extra=(readonly extra)
        groupIndex=""
        loadingMessage=(readonly loadingMessage)
        id=(readonly optionsId)
        options=(readonly publicAPI.results)
        optionsComponent=(readonly optionsComponent)
        groupComponent=(readonly groupComponent)
        select=(readonly publicAPI)
        as |option term|}}
        {{yield option term}}
      {{/component}}
    {{/if}}
    {{component afterOptionsComponent select=(readonly publicAPI) extra=(readonly extra)}}
  {{/dropdown.content}}
{{/basic-dropdown}}
